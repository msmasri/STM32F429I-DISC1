
STM32F429I-DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000680  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800082c  0800082c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800082c  0800082c  0001082c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000830  08000830  00010830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000020  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000034  20000034  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000013fb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000058a  00000000  00000000  0002143f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000150  00000000  00000000  000219d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  00021b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000b8c  00000000  00000000  00021c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000bb5  00000000  00000000  000227a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00023359  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000350  00000000  00000000  000233d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00023728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000814 	.word	0x08000814

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08000814 	.word	0x08000814

080001ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	da0b      	bge.n	8000218 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000200:	490d      	ldr	r1, [pc, #52]	; (8000238 <NVIC_SetPriority+0x4c>)
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 030f 	and.w	r3, r3, #15
 8000208:	3b04      	subs	r3, #4
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000216:	e009      	b.n	800022c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000218:	4908      	ldr	r1, [pc, #32]	; (800023c <NVIC_SetPriority+0x50>)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	e000ed00 	.word	0xe000ed00
 800023c:	e000e100 	.word	0xe000e100

08000240 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000250:	d301      	bcc.n	8000256 <SysTick_Config+0x16>
 8000252:	2301      	movs	r3, #1
 8000254:	e00f      	b.n	8000276 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <SysTick_Config+0x40>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3b01      	subs	r3, #1
 800025c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800025e:	210f      	movs	r1, #15
 8000260:	f04f 30ff 	mov.w	r0, #4294967295
 8000264:	f7ff ffc2 	bl	80001ec <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <SysTick_Config+0x40>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <SysTick_Config+0x40>)
 8000270:	2207      	movs	r2, #7
 8000272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	e000e010 	.word	0xe000e010

08000284 <SysTick_IncrementTicks_cb>:
 * @note
 * @param   None
 * @retval  None
 */
void SysTick_IncrementTicks_cb(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  ++SysTickCounter;
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <SysTick_IncrementTicks_cb+0x18>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	4a03      	ldr	r2, [pc, #12]	; (800029c <SysTick_IncrementTicks_cb+0x18>)
 8000290:	6013      	str	r3, [r2, #0]
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	20000030 	.word	0x20000030

080002a0 <SysTick_Delay>:
 * @note    SysTick will be update with IRQ callback
 * @param   Waiting time in milliseconds
 * @retval  None
 */
void SysTick_Delay(uint32_t wait_time_ms)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  /* Store start tick */
  uint32_t startTick = SysTickCounter;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <SysTick_Delay+0x2c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	60fb      	str	r3, [r7, #12]

  /* Loop until timeout */
  while((SysTickCounter - startTick) < wait_time_ms)
 80002ae:	bf00      	nop
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <SysTick_Delay+0x2c>)
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	1ad2      	subs	r2, r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d3f8      	bcc.n	80002b0 <SysTick_Delay+0x10>
  {

  }
}
 80002be:	bf00      	nop
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000030 	.word	0x20000030

080002d0 <SysTick_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void SysTick_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
  uint32_t returnCode;

  /* Update clock configuration */
  SystemCoreClockUpdate();
 80002d6:	f000 f961 	bl	800059c <SystemCoreClockUpdate>

  /* Check clock configuration */
  if(SystemCoreClock != (uint32_t) 180000000)
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <SysTick_Init+0x3c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <SysTick_Init+0x40>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d000      	beq.n	80002e6 <SysTick_Init+0x16>
  {
    /* Clock configuration is not OK */
    while(1)
 80002e4:	e7fe      	b.n	80002e4 <SysTick_Init+0x14>
  {
    /* Clock configuration is OK */
  }

  /* Configure SysTick to generate an interrupt every millisecond */
  returnCode = SysTick_Config(SystemCoreClock / 1000);
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <SysTick_Init+0x3c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <SysTick_Init+0x44>)
 80002ec:	fba2 2303 	umull	r2, r3, r2, r3
 80002f0:	099b      	lsrs	r3, r3, #6
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ffa4 	bl	8000240 <SysTick_Config>
 80002f8:	6078      	str	r0, [r7, #4]

  /* Check return code for errors */
  if (returnCode != 0)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d000      	beq.n	8000302 <SysTick_Init+0x32>
  {
    /* SysTick configuration failed */
    while(1)
 8000300:	e7fe      	b.n	8000300 <SysTick_Init+0x30>
  }
  else
  {
    /* Do nothing, SysTick configuration OK */
  }
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000000 	.word	0x20000000
 8000310:	0aba9500 	.word	0x0aba9500
 8000314:	10624dd3 	.word	0x10624dd3

08000318 <Init_LED>:
 * @note
 * @param   LED enum type
 * @retval  Init_LED
 */
void Init_LED(LED led)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	switch(led)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <Init_LED+0x16>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d031      	beq.n	8000390 <Init_LED+0x78>
			/* select pull up/down */
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR14_0);
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR14_1);
			break;
		default:
			break;
 800032c:	e061      	b.n	80003f2 <Init_LED+0xda>
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 800032e:	4a34      	ldr	r2, [pc, #208]	; (8000400 <Init_LED+0xe8>)
 8000330:	4b33      	ldr	r3, [pc, #204]	; (8000400 <Init_LED+0xe8>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG->MODER |= GPIO_MODER_MODER13_0;
 800033a:	4a32      	ldr	r2, [pc, #200]	; (8000404 <Init_LED+0xec>)
 800033c:	4b31      	ldr	r3, [pc, #196]	; (8000404 <Init_LED+0xec>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000344:	6013      	str	r3, [r2, #0]
			GPIOG->MODER &= ~(GPIO_MODER_MODER13_1);
 8000346:	4a2f      	ldr	r2, [pc, #188]	; (8000404 <Init_LED+0xec>)
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <Init_LED+0xec>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000350:	6013      	str	r3, [r2, #0]
			GPIOG->OTYPER &= ~(GPIO_OTYPER_OT_13);
 8000352:	4a2c      	ldr	r2, [pc, #176]	; (8000404 <Init_LED+0xec>)
 8000354:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <Init_LED+0xec>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800035c:	6053      	str	r3, [r2, #4]
			GPIOG->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_0;
 800035e:	4a29      	ldr	r2, [pc, #164]	; (8000404 <Init_LED+0xec>)
 8000360:	4b28      	ldr	r3, [pc, #160]	; (8000404 <Init_LED+0xec>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000368:	6093      	str	r3, [r2, #8]
			GPIOG->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR13_1);
 800036a:	4a26      	ldr	r2, [pc, #152]	; (8000404 <Init_LED+0xec>)
 800036c:	4b25      	ldr	r3, [pc, #148]	; (8000404 <Init_LED+0xec>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000374:	6093      	str	r3, [r2, #8]
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR13_0);
 8000376:	4a23      	ldr	r2, [pc, #140]	; (8000404 <Init_LED+0xec>)
 8000378:	4b22      	ldr	r3, [pc, #136]	; (8000404 <Init_LED+0xec>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000380:	60d3      	str	r3, [r2, #12]
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR13_1);
 8000382:	4a20      	ldr	r2, [pc, #128]	; (8000404 <Init_LED+0xec>)
 8000384:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <Init_LED+0xec>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800038c:	60d3      	str	r3, [r2, #12]
			break;
 800038e:	e030      	b.n	80003f2 <Init_LED+0xda>
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000390:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <Init_LED+0xe8>)
 8000392:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <Init_LED+0xe8>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG->MODER |= GPIO_MODER_MODER14_0;
 800039c:	4a19      	ldr	r2, [pc, #100]	; (8000404 <Init_LED+0xec>)
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <Init_LED+0xec>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a6:	6013      	str	r3, [r2, #0]
			GPIOG->MODER &= ~(GPIO_MODER_MODER14_1);
 80003a8:	4a16      	ldr	r2, [pc, #88]	; (8000404 <Init_LED+0xec>)
 80003aa:	4b16      	ldr	r3, [pc, #88]	; (8000404 <Init_LED+0xec>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80003b2:	6013      	str	r3, [r2, #0]
			GPIOG->OTYPER &= ~(GPIO_OTYPER_OT_14);
 80003b4:	4a13      	ldr	r2, [pc, #76]	; (8000404 <Init_LED+0xec>)
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <Init_LED+0xec>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003be:	6053      	str	r3, [r2, #4]
			GPIOG->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_0;
 80003c0:	4a10      	ldr	r2, [pc, #64]	; (8000404 <Init_LED+0xec>)
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <Init_LED+0xec>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ca:	6093      	str	r3, [r2, #8]
			GPIOG->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR14_1;
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <Init_LED+0xec>)
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <Init_LED+0xec>)
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80003d6:	6093      	str	r3, [r2, #8]
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR14_0);
 80003d8:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <Init_LED+0xec>)
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <Init_LED+0xec>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80003e2:	60d3      	str	r3, [r2, #12]
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR14_1);
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <Init_LED+0xec>)
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <Init_LED+0xec>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80003ee:	60d3      	str	r3, [r2, #12]
			break;
 80003f0:	bf00      	nop
	}

}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40023800 	.word	0x40023800
 8000404:	40021800 	.word	0x40021800

08000408 <Set_LED>:
 * @note
 * @param   LED enum type
 * @retval  Set_LED
 */
void Set_LED(LED led)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
	switch(led){
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d002      	beq.n	800041e <Set_LED+0x16>
 8000418:	2b01      	cmp	r3, #1
 800041a:	d005      	beq.n	8000428 <Set_LED+0x20>
			/* set pin 14 */
			GPIOG->BSRRL = GPIO_BSRR_BS_14;
			break;

		default:
		break;
 800041c:	e009      	b.n	8000432 <Set_LED+0x2a>
			GPIOG->BSRRL = GPIO_BSRR_BS_13;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <Set_LED+0x38>)
 8000420:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000424:	831a      	strh	r2, [r3, #24]
			break;
 8000426:	e004      	b.n	8000432 <Set_LED+0x2a>
			GPIOG->BSRRL = GPIO_BSRR_BS_14;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <Set_LED+0x38>)
 800042a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800042e:	831a      	strh	r2, [r3, #24]
			break;
 8000430:	bf00      	nop
	}
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021800 	.word	0x40021800

08000444 <Reset_LED>:
 * @param   LED enum type
 * @retval  Set_LED
 */

void Reset_LED(LED led)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	switch(led){
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d002      	beq.n	800045a <Reset_LED+0x16>
 8000454:	2b01      	cmp	r3, #1
 8000456:	d005      	beq.n	8000464 <Reset_LED+0x20>
			/* reset pin 14 */
			GPIOG->BSRRH = GPIO_BSRR_BS_14;
			break;

		default:
		break;
 8000458:	e009      	b.n	800046e <Reset_LED+0x2a>
			GPIOG->BSRRH = GPIO_BSRR_BS_13;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <Reset_LED+0x38>)
 800045c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000460:	835a      	strh	r2, [r3, #26]
			break;
 8000462:	e004      	b.n	800046e <Reset_LED+0x2a>
			GPIOG->BSRRH = GPIO_BSRR_BS_14;
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <Reset_LED+0x38>)
 8000466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800046a:	835a      	strh	r2, [r3, #26]
			break;
 800046c:	bf00      	nop
	}
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021800 	.word	0x40021800

08000480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004b8 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000484:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000486:	e003      	b.n	8000490 <LoopCopyDataInit>

08000488 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800048a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800048c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800048e:	3104      	adds	r1, #4

08000490 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000490:	480b      	ldr	r0, [pc, #44]	; (80004c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000494:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000496:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000498:	d3f6      	bcc.n	8000488 <CopyDataInit>
  ldr  r2, =_sbss
 800049a:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800049c:	e002      	b.n	80004a4 <LoopFillZerobss>

0800049e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800049e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004a0:	f842 3b04 	str.w	r3, [r2], #4

080004a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004a8:	d3f9      	bcc.n	800049e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004aa:	f000 f841 	bl	8000530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ae:	f000 f98d 	bl	80007cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004b2:	f000 f96b 	bl	800078c <main>
  bx  lr    
 80004b6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80004bc:	08000834 	.word	0x08000834
  ldr  r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004c4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80004c8:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80004cc:	20000034 	.word	0x20000034

080004d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004d0:	e7fe      	b.n	80004d0 <ADC_IRQHandler>

080004d2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <HardFault_Handler+0x4>

080004e6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <MemManage_Handler+0x4>

080004ec <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <BusFault_Handler+0x4>

080004f2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <UsageFault_Handler+0x4>

080004f8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	af00      	add	r7, sp, #0
	SysTick_IncrementTicks_cb();
 8000526:	f7ff fead 	bl	8000284 <SysTick_IncrementTicks_cb>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000534:	4a16      	ldr	r2, [pc, #88]	; (8000590 <SystemInit+0x60>)
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <SystemInit+0x60>)
 8000538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000544:	4a13      	ldr	r2, [pc, #76]	; (8000594 <SystemInit+0x64>)
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <SystemInit+0x64>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <SystemInit+0x64>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000556:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <SystemInit+0x64>)
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <SystemInit+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000564:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <SystemInit+0x64>)
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <SystemInit+0x68>)
 800056a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800056c:	4a09      	ldr	r2, [pc, #36]	; (8000594 <SystemInit+0x64>)
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <SystemInit+0x64>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000576:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <SystemInit+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800057e:	f000 f889 	bl	8000694 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000582:	4b03      	ldr	r3, [pc, #12]	; (8000590 <SystemInit+0x60>)
 8000584:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000588:	609a      	str	r2, [r3, #8]
#endif
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00
 8000594:	40023800 	.word	0x40023800
 8000598:	24003010 	.word	0x24003010

0800059c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	2302      	movs	r3, #2
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	2302      	movs	r3, #2
 80005b4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005b6:	4b32      	ldr	r3, [pc, #200]	; (8000680 <SystemCoreClockUpdate+0xe4>)
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f003 030c 	and.w	r3, r3, #12
 80005be:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80005c0:	693b      	ldr	r3, [r7, #16]
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d007      	beq.n	80005d6 <SystemCoreClockUpdate+0x3a>
 80005c6:	2b08      	cmp	r3, #8
 80005c8:	d009      	beq.n	80005de <SystemCoreClockUpdate+0x42>
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d13d      	bne.n	800064a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <SystemCoreClockUpdate+0xe8>)
 80005d0:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <SystemCoreClockUpdate+0xec>)
 80005d2:	601a      	str	r2, [r3, #0]
      break;
 80005d4:	e03d      	b.n	8000652 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80005d6:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <SystemCoreClockUpdate+0xe8>)
 80005d8:	4a2c      	ldr	r2, [pc, #176]	; (800068c <SystemCoreClockUpdate+0xf0>)
 80005da:	601a      	str	r2, [r3, #0]
      break;
 80005dc:	e039      	b.n	8000652 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemCoreClockUpdate+0xe4>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	0d9b      	lsrs	r3, r3, #22
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemCoreClockUpdate+0xe4>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005f2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d00c      	beq.n	8000614 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005fa:	4a24      	ldr	r2, [pc, #144]	; (800068c <SystemCoreClockUpdate+0xf0>)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <SystemCoreClockUpdate+0xe4>)
 8000604:	6852      	ldr	r2, [r2, #4]
 8000606:	0992      	lsrs	r2, r2, #6
 8000608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800060c:	fb02 f303 	mul.w	r3, r2, r3
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e00b      	b.n	800062c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000614:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <SystemCoreClockUpdate+0xec>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	fbb2 f3f3 	udiv	r3, r2, r3
 800061c:	4a18      	ldr	r2, [pc, #96]	; (8000680 <SystemCoreClockUpdate+0xe4>)
 800061e:	6852      	ldr	r2, [r2, #4]
 8000620:	0992      	lsrs	r2, r2, #6
 8000622:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000626:	fb02 f303 	mul.w	r3, r2, r3
 800062a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <SystemCoreClockUpdate+0xe4>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	0c1b      	lsrs	r3, r3, #16
 8000632:	f003 0303 	and.w	r3, r3, #3
 8000636:	3301      	adds	r3, #1
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	fbb2 f3f3 	udiv	r3, r2, r3
 8000644:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <SystemCoreClockUpdate+0xe8>)
 8000646:	6013      	str	r3, [r2, #0]
      break;
 8000648:	e003      	b.n	8000652 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <SystemCoreClockUpdate+0xe8>)
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <SystemCoreClockUpdate+0xec>)
 800064e:	601a      	str	r2, [r3, #0]
      break;
 8000650:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <SystemCoreClockUpdate+0xe4>)
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	091b      	lsrs	r3, r3, #4
 8000658:	f003 030f 	and.w	r3, r3, #15
 800065c:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <SystemCoreClockUpdate+0xf4>)
 800065e:	5cd3      	ldrb	r3, [r2, r3]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <SystemCoreClockUpdate+0xe8>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	fa22 f303 	lsr.w	r3, r2, r3
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemCoreClockUpdate+0xe8>)
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	20000000 	.word	0x20000000
 8000688:	00f42400 	.word	0x00f42400
 800068c:	007a1200 	.word	0x007a1200
 8000690:	20000004 	.word	0x20000004

08000694 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80006a2:	4a36      	ldr	r2, [pc, #216]	; (800077c <SetSysClock+0xe8>)
 80006a4:	4b35      	ldr	r3, [pc, #212]	; (800077c <SetSysClock+0xe8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ac:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80006ae:	4b33      	ldr	r3, [pc, #204]	; (800077c <SetSysClock+0xe8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3301      	adds	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d103      	bne.n	80006cc <SetSysClock+0x38>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80006ca:	d1f0      	bne.n	80006ae <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80006cc:	4b2b      	ldr	r3, [pc, #172]	; (800077c <SetSysClock+0xe8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80006d8:	2301      	movs	r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	e001      	b.n	80006e2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d102      	bne.n	80006ee <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <SetSysClock+0xe8>)
 80006ea:	4a25      	ldr	r2, [pc, #148]	; (8000780 <SetSysClock+0xec>)
 80006ec:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <SetSysClock+0xe8>)
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <SetSysClock+0xe8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80006fa:	4a22      	ldr	r2, [pc, #136]	; (8000784 <SetSysClock+0xf0>)
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <SetSysClock+0xf0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000704:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000706:	4a1d      	ldr	r2, [pc, #116]	; (800077c <SetSysClock+0xe8>)
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <SetSysClock+0xe8>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800070e:	4a1b      	ldr	r2, [pc, #108]	; (800077c <SetSysClock+0xe8>)
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <SetSysClock+0xe8>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000718:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <SetSysClock+0xe8>)
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <SetSysClock+0xe8>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000724:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <SetSysClock+0xe8>)
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <SetSysClock+0xe8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000730:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000732:	bf00      	nop
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <SetSysClock+0xe8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0f9      	beq.n	8000734 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <SetSysClock+0xf4>)
 8000742:	f240 7205 	movw	r2, #1797	; 0x705
 8000746:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <SetSysClock+0xe8>)
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <SetSysClock+0xe8>)
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	f023 0303 	bic.w	r3, r3, #3
 8000752:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000754:	4a09      	ldr	r2, [pc, #36]	; (800077c <SetSysClock+0xe8>)
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <SetSysClock+0xe8>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000760:	bf00      	nop
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <SetSysClock+0xe8>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	f003 030c 	and.w	r3, r3, #12
 800076a:	2b08      	cmp	r3, #8
 800076c:	d1f9      	bne.n	8000762 <SetSysClock+0xce>
    {
    }
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	07405a08 	.word	0x07405a08
 8000784:	40007000 	.word	0x40007000
 8000788:	40023c00 	.word	0x40023c00

0800078c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	/*initialize functions */
	SysTick_Init();
 8000790:	f7ff fd9e 	bl	80002d0 <SysTick_Init>
	Init_LED(GREEN);
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff fdbf 	bl	8000318 <Init_LED>
	Init_LED(RED);
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff fdbc 	bl	8000318 <Init_LED>

  /* Infinite loop */
  while (1)
  {
	  /*TurnOn LEDS*/
	  Set_LED(GREEN);	Set_LED(RED);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fe31 	bl	8000408 <Set_LED>
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fe2e 	bl	8000408 <Set_LED>
	  SysTick_Delay(300);
 80007ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007b0:	f7ff fd76 	bl	80002a0 <SysTick_Delay>
	  /*TurnOFF LEDS*/
	  Reset_LED(GREEN); Reset_LED(RED);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff fe45 	bl	8000444 <Reset_LED>
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fe42 	bl	8000444 <Reset_LED>
	  SysTick_Delay(300);
 80007c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007c4:	f7ff fd6c 	bl	80002a0 <SysTick_Delay>
	  Set_LED(GREEN);	Set_LED(RED);
 80007c8:	e7ea      	b.n	80007a0 <main+0x14>
	...

080007cc <__libc_init_array>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	4e0d      	ldr	r6, [pc, #52]	; (8000804 <__libc_init_array+0x38>)
 80007d0:	4c0d      	ldr	r4, [pc, #52]	; (8000808 <__libc_init_array+0x3c>)
 80007d2:	1ba4      	subs	r4, r4, r6
 80007d4:	10a4      	asrs	r4, r4, #2
 80007d6:	2500      	movs	r5, #0
 80007d8:	42a5      	cmp	r5, r4
 80007da:	d109      	bne.n	80007f0 <__libc_init_array+0x24>
 80007dc:	4e0b      	ldr	r6, [pc, #44]	; (800080c <__libc_init_array+0x40>)
 80007de:	4c0c      	ldr	r4, [pc, #48]	; (8000810 <__libc_init_array+0x44>)
 80007e0:	f000 f818 	bl	8000814 <_init>
 80007e4:	1ba4      	subs	r4, r4, r6
 80007e6:	10a4      	asrs	r4, r4, #2
 80007e8:	2500      	movs	r5, #0
 80007ea:	42a5      	cmp	r5, r4
 80007ec:	d105      	bne.n	80007fa <__libc_init_array+0x2e>
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007f4:	4798      	blx	r3
 80007f6:	3501      	adds	r5, #1
 80007f8:	e7ee      	b.n	80007d8 <__libc_init_array+0xc>
 80007fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007fe:	4798      	blx	r3
 8000800:	3501      	adds	r5, #1
 8000802:	e7f2      	b.n	80007ea <__libc_init_array+0x1e>
 8000804:	0800082c 	.word	0x0800082c
 8000808:	0800082c 	.word	0x0800082c
 800080c:	0800082c 	.word	0x0800082c
 8000810:	08000830 	.word	0x08000830

08000814 <_init>:
 8000814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000816:	bf00      	nop
 8000818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800081a:	bc08      	pop	{r3}
 800081c:	469e      	mov	lr, r3
 800081e:	4770      	bx	lr

08000820 <_fini>:
 8000820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000822:	bf00      	nop
 8000824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000826:	bc08      	pop	{r3}
 8000828:	469e      	mov	lr, r3
 800082a:	4770      	bx	lr
